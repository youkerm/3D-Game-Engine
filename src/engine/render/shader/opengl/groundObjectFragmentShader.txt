#version 400 core

in vec2 pass_textureCoordinates;
in vec3 surfaceNormal;
in vec3 toLightVector[4];
in vec3 toCameraVector;
in float visibility;

out vec4 out_Color;

uniform sampler2D modelTexture;
uniform vec3 lightColour[4];
uniform vec3 skyColor1;
uniform vec3 skyColor2;

uniform float blendFactor;


void main(void){

	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitVectorToCamera = normalize(toCameraVector);
	
	vec3 skyColor = mix(skyColor1, skyColor2, blendFactor);
	
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);
	
	for(int i = 0; i < 4; i++) {
	    float distance = length(toLightVector[i]);
		vec3 unitLightVector = normalize(toLightVector[i]);
		float nDot1 = dot(unitNormal, unitLightVector);
		float brightness = max(nDot1, 0.0);
		vec3 lightDirection = -unitLightVector;
		vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
	}
	
	vec4 textureColour = texture(modelTexture, pass_textureCoordinates);
	if(textureColour.a<0.5) {
		discard;
	}
	
	out_Color = textureColour;
	out_Color = mix(vec4(skyColor,1.0),out_Color, visibility);
	
	
}